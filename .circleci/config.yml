version: 2
jobs:
  test:
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: matfax/cci-build:golang
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/mysql/
      - image: matfax/go-redis-orm:mysql
        environment:
          MYSQL_ROOT_PASSWORD: 'gogogo'
          MYSQL_DATABASE: goredisorm
      - image: redis

    working_directory: /go/src/github.com/matfax/go-redis-orm

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
      - run:
          name: Create Test Folder
          command: mkdir -p $TEST_RESULTS
      - restore_cache:
          key: dep-
      - run:
          command: dep ensure
          name: Update dependencies
      - save_cache:
          key: dep-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
          - vendor
          - Gopkg.lock
      - run:
          name: Wait for Redis
          # preinstalled in circleci/* docker image
          command: dockerize -wait tcp://localhost:6379 -timeout 60s
      - run:
          name: Wait for MySQL
          # preinstalled in circleci/* docker image
          command: dockerize -wait tcp://localhost:3306 -timeout 120s
      - run:
          name: Build
          command: |
            go install
            go-redis-orm code -i ./example/yaml/ -o ./example/model/
      - run:
          name: Upload Dependency Graph to Fossa
          command: fossa
      - run:
          name: Run SQL Builder Tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/sql-builder-report.out > ${TEST_RESULTS}/gsql-builder-report.xml" EXIT
            go test -v ./orm/sqlbuilder | tee ${TEST_RESULTS}/sql-builder-report.out
      - run:
          name: Run Model Tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test-report.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            go test -v ./example/model/... | tee ${TEST_RESULTS}/go-test-report.out
      - run:
          name: Run Fossa Tests
          command: fossa test
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

workflows:
  version: 2
  test:
    jobs:
      - test
